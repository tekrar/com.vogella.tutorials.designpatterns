<section id="designpattern_overview">
	<title>Design pattern in software development</title>
	<para>Design patterns are proven solutions approaches to specific
		problems. A design pattern is not a
		framework and is not directly
		deployed via code.
	</para>
	<para>
		Design Pattern have two main usages:
		<itemizedlist>
			<listitem>
				<para>
					Common language for developers: They provide developers a
					common
					language for
					certain problems. For example if a developer
					tells
					another
					developer that he is using a
					<wordasword>Singleton</wordasword>
					, the another
					developer
					(should) know exactly what this means.
				</para>
			</listitem>
			<listitem>
				<para>Capture good practices: Design patterns capture solutions
					which have been successfully applied to problems. By learning these
					patterns and the related problem, an unexperienced
					developer
					learns a
					lot about software design.
				</para>
			</listitem>
		</itemizedlist>


	</para>
	<para>
		Design pattern are based on the base principles of object
		orientated
		design.
		<itemizedlist>
			<listitem>
				<para>Program to an interface not an implementation</para>
			</listitem>
			<listitem>
				<para>Favor object composition over inheritance</para>
			</listitem>
		</itemizedlist>
	</para>

	<para>
		Design Patterns can be divided into:
		<itemizedlist>
			<listitem>
				<para>Creational Patterns</para>
			</listitem>
			<listitem>
				<para>Structural Patterns</para>
			</listitem>
			<listitem>
				<para>Behavioral Patterns</para>
			</listitem>
		</itemizedlist>
	</para>

	<note>
		<para>
			The terminology
			<wordasword>Design Pattern</wordasword>
			in software development is primary
			based on the book
			<wordasword>Design
				Patterns -
				Elements of
				Reusable Object-Oriented Software
			</wordasword>
			from Erich
			Gamma,
			Richard Helm,
			Ralph Johnson und John Vlissides.
		</para>
	</note>
</section>